/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [ratios=1] - The column ratio of the element.
 * @param {number} [gutter=jeet.gutter] - The gutter for the column.
 * @returns {list} width gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} result - The layout direction.
 */
/**
 * Replace a specified list value with a new value.
 * @param {list} list - The list of values you want to alter.
 * @param {number} index - The index of the list item you want to replace.
 * @param {*} value - The value you want to replace $index with.
 * @returns {list} result - The list with the value replaced.
 */
/**
 * Reverse a list.
 * @param {list} list - The list of values you want to reverse.
 * @returns {list} result - The reversed list.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [offset=0] - A offset specified as a fraction (see ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-gutter function.
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [offset=0] - A offset specified as a fraction (see ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [ratios=0] - Specify how far along you want the element to move.
 * @param {string} [col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [color=black] - The background tint applied.
 * @param {boolean} [important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [max-width=jeet.max-width] - The max width the element can be.
 * @param {number} [pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [pad=0] - Specify the element's left and right padding.
 * @param {bollean/string} [align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
/*# sourceMappingURL=data:application/json;base64, */